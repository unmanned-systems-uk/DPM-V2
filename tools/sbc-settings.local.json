{
  "customInstructions": "# DPM Air-Side (C++) - Claude Code Session Instructions\n\n## CRITICAL: Execute BEFORE Every Task\n\n**MANDATORY SESSION START PROCEDURE:**\n\n1. **Read Workflow Guidelines** (FIRST ACTION):\n   ```bash\n   view ../CC_READ_THIS_FIRST.md\n   ```\n   This contains critical specification-first architecture rules.\n\n2. **Execute Git Pull**:\n   ```bash\n   bash_tool git pull origin main\n   ```\n   If conflicts occur, STOP and notify user.\n\n3. **Run Protocol Audit** (if available):\n   ```bash\n   bash_tool test -f ../tools/audit_protocol_sync.sh && ../tools/audit_protocol_sync.sh || echo 'Manual checks required'\n   ```\n\n4. **Check Protocol Synchronization**:\n   ```bash\n   # Check for unimplemented commands\n   bash_tool cat ../docs/protocol/commands.json | jq -r '.commands | to_entries[] | select(.value.implemented.air_side == false) | .key'\n   \n   # Check for unimplemented properties\n   bash_tool cat ../docs/protocol/camera_properties.json | jq -r '.properties | to_entries[] | select(.value.implemented.air_side == false) | .key'\n   ```\n   If ANY items found, ASK USER before implementing.\n\n5. **Check for Hardcoded Values** (CRITICAL):\n   ```bash\n   bash_tool grep -rn 'std::vector.*ISO\\|ISO.*{' src/ 2>/dev/null | grep -v generated | grep -v '//' || echo 'No hardcoded values found'\n   ```\n   If violations found, STOP and report to user.\n\n6. **Read Current Status**:\n   ```bash\n   view docs/PROGRESS_AND_TODO.md\n   ```\n\n7. **Report Completion**:\n   Provide summary:\n   - Platform: Air-Side (C++)\n   - Git status\n   - Protocol sync results\n   - Hardcoded values check\n   - Current phase and next task\n\n## CRITICAL RULES - ALWAYS ENFORCE\n\n### Specification-First Architecture\n\n**Golden Rule:** `../docs/protocol/camera_properties.json` is SINGLE SOURCE OF TRUTH\n\n❌ **FORBIDDEN:**\n- NEVER hardcode camera property values (ISO, shutter, aperture, etc.)\n- NEVER implement properties without reading camera_properties.json first\n- NEVER add values to code without updating specification first\n- Examples of FORBIDDEN code:\n  ```cpp\n  // ❌ FORBIDDEN\n  const std::vector<std::string> ISO_VALUES = {\"50\", \"100\", \"200\"};\n  const std::map<std::string, int> ISO_MAP = {{\"50\", 50}, {\"100\", 100}};\n  ```\n\n✅ **REQUIRED:**\n- ALWAYS read from camera_properties.json (use PropertyLoader or code generation)\n- ALWAYS update specification FIRST when discovering new values\n- ALWAYS commit spec changes separately: `[PROTOCOL] Update camera_properties.json`\n- Example of CORRECT approach:\n  ```cpp\n  // ✅ CORRECT - Load from specification\n  auto iso_values = PropertyLoader::loadIsoValues();\n  ```\n\n### C++ Development Rules\n\n- Use C++17 features (smart pointers, RAII, std::optional)\n- Run valgrind for memory leak detection\n- Check all Sony SDK return values\n- Build before committing: `cd build && cmake .. && make -j4`\n- Never use raw new/delete without smart pointers\n\n### Commit Workflow\n\n- Commit every 30-60 minutes\n- Format: `[TYPE] Component: Description\\n\\n- Detail 1\\n- Detail 2`\n- Types: FEATURE, FIX, PROTOCOL, DOCS, REFACTOR, TEST, BUILD, WIP\n- Update docs/PROGRESS_AND_TODO.md after significant changes\n- ALWAYS verify build succeeds before committing\n\n## When User First Contacts You\n\nIf user gives a task without session start:\n\n```\nBefore I start, I need to execute the mandatory Air-Side session start checklist.\nThis project has critical specification-first rules to prevent synchronization issues.\n\n[Execute all 7 steps above]\n\n✅ Session start complete. Now working on: [user's request]\n```\n\n## Past Issue Context\n\n**October 2025 Specification Divergence:**\n- camera_properties.json had 12 ISO values (outdated)\n- Air-Side C++ had 35 ISO values (hardcoded)\n- Caused synchronization failures\n\nThese rules exist to prevent recurrence.\n\n## References\n\n- Workflow guide: `../CC_READ_THIS_FIRST.md`\n- Build plan: `docs/BUILD_AND_IMPLEMENTATION_PLAN.md`\n- Protocol spec: `../docs/protocol/camera_properties.json`\n- Status tracker: `docs/PROGRESS_AND_TODO.md`",
  
  "autoSave": true,
  "gitAutoCommit": false
}
