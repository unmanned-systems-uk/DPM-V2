{
  "customInstructions": "# DPM Ground-Side (Android) - Claude Code Session Instructions\n\n## CRITICAL: Execute BEFORE Every Task\n\n**MANDATORY SESSION START PROCEDURE:**\n\n1. **Read Workflow Guidelines** (FIRST ACTION):\n   ```bash\n   view ../CC_READ_THIS_FIRST.md\n   ```\n   This contains critical specification-first architecture rules.\n\n2. **Execute Git Pull**:\n   ```bash\n   bash_tool git pull origin main\n   ```\n   If conflicts occur, STOP and notify user.\n\n3. **Run Protocol Audit** (if available):\n   ```bash\n   bash_tool test -f ../tools/audit_protocol_sync.sh && ../tools/audit_protocol_sync.sh || echo 'Manual checks required'\n   ```\n\n4. **Check Protocol Synchronization**:\n   ```bash\n   # Check for unimplemented commands\n   bash_tool cat ../docs/protocol/commands.json | jq -r '.commands | to_entries[] | select(.value.implemented.ground_side == false) | .key'\n   \n   # Check for unimplemented properties\n   bash_tool cat ../docs/protocol/camera_properties.json | jq -r '.properties | to_entries[] | select(.value.implemented.ground_side == false) | .key'\n   ```\n   If ANY items found, ASK USER before implementing.\n\n5. **Check for Hardcoded Values** (CRITICAL):\n   ```bash\n   bash_tool grep -rn 'arrayOf.*ISO\\|listOf.*ISO' app/src/ 2>/dev/null | grep -v generated | grep -v '//' || echo 'No hardcoded values found'\n   ```\n   If violations found, STOP and report to user.\n\n6. **Check Commented-Out Methods**:\n   ```bash\n   bash_tool grep -n '// fun ' app/src/main/java/com/dpm/groundstation/network/NetworkClient.kt | head -10\n   ```\n   Report any planned features to user.\n\n7. **Read Current Status**:\n   ```bash\n   view docs/PROGRESS_AND_TODO.md\n   ```\n\n8. **Report Completion**:\n   Provide summary:\n   - Platform: Ground-Side (Android)\n   - Git status\n   - Protocol sync results\n   - Hardcoded values check\n   - Commented methods found\n   - Current phase and next task\n\n## CRITICAL RULES - ALWAYS ENFORCE\n\n### Specification-First Architecture\n\n**Golden Rule:** `../docs/protocol/camera_properties.json` is SINGLE SOURCE OF TRUTH\n\n❌ **FORBIDDEN:**\n- NEVER hardcode camera property values (ISO, shutter, aperture, etc.)\n- NEVER implement properties without reading camera_properties.json first\n- NEVER add values to code without updating specification first\n- Examples of FORBIDDEN code:\n  ```kotlin\n  // ❌ FORBIDDEN\n  val isoValues = arrayOf(\"50\", \"100\", \"200\", \"400\")\n  val isoList = listOf(\"50\", \"100\", \"200\")\n  ```\n\n✅ **REQUIRED:**\n- ALWAYS load from assets/camera_properties.json using PropertyLoader\n- ALWAYS copy updated spec to app/src/main/assets/ when spec changes\n- ALWAYS update specification FIRST when discovering new values\n- ALWAYS commit spec changes separately: `[PROTOCOL] Update camera_properties.json`\n- Example of CORRECT approach:\n  ```kotlin\n  // ✅ CORRECT - Load from specification\n  val isoValues = PropertyLoader.loadIsoValues(context)\n  ```\n\n### Android Development Rules\n\n- Follow MVVM architecture (Fragment → ViewModel → NetworkClient)\n- Use Coroutines for async operations (viewModelScope, Dispatchers.IO)\n- Use Kotlin null safety (?, !!, ?.let {})\n- Build before committing: `./gradlew assembleDebug`\n- Test on device/emulator before committing\n- Keep NetworkClient methods in sync with protocol\n\n### Commented-Out Methods Workflow\n\nNetworkClient.kt contains planned features as commented-out methods:\n```kotlin\n// fun setCameraProperty(property: String, value: Any) { ... }\n```\n\nWhen implementing:\n1. Check if Air-Side has implemented the handler\n2. ASK USER about UI requirements\n3. Uncomment method\n4. Add ViewModel method\n5. Add UI controls (using spec values, not hardcoded!)\n6. Update commands.json: `\"ground_side\": true`\n\n### Commit Workflow\n\n- Commit every 30-60 minutes\n- Format: `[TYPE] Component: Description\\n\\n- Detail 1\\n- Detail 2`\n- Types: FEATURE, FIX, PROTOCOL, DOCS, REFACTOR, TEST, BUILD, WIP\n- Update docs/PROGRESS_AND_TODO.md after significant changes\n- ALWAYS verify build succeeds before committing\n\n## When User First Contacts You\n\nIf user gives a task without session start:\n\n```\nBefore I start, I need to execute the mandatory Ground-Side session start checklist.\nThis project has critical specification-first rules to prevent synchronization issues.\n\n[Execute all 8 steps above]\n\n✅ Session start complete. Now working on: [user's request]\n```\n\n## Past Issue Context\n\n**October 2025 Specification Divergence:**\n- camera_properties.json had 12 ISO values (outdated)\n- Ground-Side Android had unknown count (hardcoded)\n- Air-Side C++ had 35 ISO values (hardcoded)\n- Caused synchronization failures\n\nThese rules exist to prevent recurrence.\n\n## Property Implementation Example\n\nWhen user says \"Add ISO control to UI\":\n\n1. Read specification:\n   ```bash\n   bash_tool cat ../docs/protocol/camera_properties.json | jq '.properties.iso'\n   ```\n\n2. Create PropertyLoader (if doesn't exist):\n   ```kotlin\n   object PropertyLoader {\n       fun loadIsoValues(context: Context): List<String> {\n           val json = context.assets.open(\"camera_properties.json\")\n               .bufferedReader().use { it.readText() }\n           val spec = JSONObject(json)\n           val isoArray = spec.getJSONObject(\"properties\")\n               .getJSONObject(\"iso\")\n               .getJSONObject(\"validation\")\n               .getJSONArray(\"values\")\n           return (0 until isoArray.length()).map { isoArray.getString(it) }\n       }\n   }\n   ```\n\n3. Use in Fragment:\n   ```kotlin\n   override fun onCreate(savedInstanceState: Bundle?) {\n       super.onCreate(savedInstanceState)\n       isoValues = PropertyLoader.loadIsoValues(requireContext())\n   }\n   ```\n\n4. NEVER do this:\n   ```kotlin\n   val isoValues = arrayOf(\"50\", \"100\", \"200\") // ❌ FORBIDDEN\n   ```\n\n## References\n\n- Workflow guide: `../CC_READ_THIS_FIRST.md`\n- Protocol spec: `../docs/protocol/camera_properties.json`\n- Status tracker: `docs/PROGRESS_AND_TODO.md`\n- Architecture: `../docs/Updated_System_Architecture_H16.md`",
  
  "autoSave": true,
  "gitAutoCommit": false
}
